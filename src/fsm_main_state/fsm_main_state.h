typedef enum {
    STAT_BATTERY_VOLTAGE_VALID = (1 << 0),
    STAT_SYSTEM_IN_AIR_RESTORE = (1 << 1),
    STAT_SYSTEM_SENSORS_INITIALIZED = (1 << 2),
    STAT_SYSTEM_RETURNED_TO_HOME = (1 << 3),
    STAT_AUTO_MISSION_AVAILABLE = (1 << 4),
    STAT_GLOBAL_POSITION_VALID = (1 << 5),
    STAT_LAUNCH_POSITION_VALID = (1 << 6),
    STAT_HOME_POSITION_VALID = (1 << 7),
    STAT_LOCAL_POSITION_VALID = (1 << 8),
    STAT_LOCAL_ALTITUDE_VALID = (1 << 9),
    STAT_AIRSPEED_VALID = (1 << 10),
    STAT_LANDED = (1 << 11),
    STAT_POWER_INPUT_VALID = (1 << 12),
    STAT_AVIONICS_POWER_RAIL_VOLTAGE = (1 << 13),
    STAT_USB_CONNECTED = (1 << 14),
    STAT_RC_SIGNAL_FOUND_ONCE = (1 << 15),
    STAT_RC_SIGNAL_LOST = (1 << 16),
    STAT_RC_SIGNAL_LOST_CMD = (1 << 17),
    STAT_RC_INPUT_BLOCKED = (1 << 18),
    STAT_DATA_LINK_LOST = (1 << 19),
    STAT_ENGINE_FAILURE = (1 << 20),
    STAT_GPS_FAILURE = (1 << 21),
    STAT_BAROMETER_FAILURE = (1 << 22),
    STAT_OFFBOARD_CONTROL_SIGNAL_FOUND_ONCE = (1 << 23),
    STAT_OFFBOARD_CONTROL_SIGNAL_LOST = (1 << 24),
    STAT_OFFBOARD_CONTROL_SIGNAL_WEAK = (1 << 25),
    STAT_OFFBOARD_CONTROL_SET_BY_COMMAND = (1 << 26),
    STAT_HIL_ENABLED = (1 << 27),
    // note 32 max, add new enum if needed
} status_t;

typedef enum {
    CIRCUIT_BREAKER_POWER_CHECK = (1 << 0),
    CIRCUIT_BREAKER_AIRSPD_CHECK = (1 << 1),
    CIRCUIT_BREAKER_ENGINEFAILURE_CHECK = (1 << 2),
    CIRCUIT_BREAKER_GPSFAILURE_CHECK = (1 << 3),
    // note 32 max, add new enum if needed
} circuit_breaker_t;

typedef enum {
    MAIN_STATE_MANUAL = 0,
    MAIN_STATE_ALTCTL = 1,
    MAIN_STATE_POSCTL = 2,
    MAIN_STATE_AUTO_MISSION = 3,
    MAIN_STATE_AUTO_LOITER = 4,
    MAIN_STATE_AUTO_RTL = 5,
    MAIN_STATE_ACRO = 6,
    MAIN_STATE_AUTO_OFFBOARD = 7,
    MAIN_STATE_STAB = 8,
    MAIN_STATE_MAX = 9
} main_state_t;

typedef enum {
    ARMING_STATE_INIT = 0,
    ARMING_STATE_STANDBY = 1,
    ARMING_STATE_ARMED = 2,
    ARMING_STATE_ARMED_ERROR = 3,
    ARMING_STATE_STANDBY_ERROR = 4,
    ARMING_STATE_REBOOT = 5,
    ARMING_STATE_IN_AIR_RESTORE = 6,
    ARMING_STATE_MAX = 7,
} arming_state_t;

typedef enum {
    NAVIGATION_STATE_MANUAL = 0,
    NAVIGATION_STATE_ALTCTL = 1,
    NAVIGATION_STATE_POSCTL = 2,
    NAVIGATION_STATE_AUTO_MISSION = 3,
    NAVIGATION_STATE_AUTO_LOITER = 4,
    NAVIGATION_STATE_AUTO_RTL = 5,
    NAVIGATION_STATE_AUTO_RCRECOVER = 6,
    NAVIGATION_STATE_AUTO_RTGS = 7,
    NAVIGATION_STATE_AUTO_LANDENGFAIL = 8,
    NAVIGATION_STATE_AUTO_LANDGPSFAIL = 9,
    NAVIGATION_STATE_ACRO = 10,
    NAVIGATION_STATE_LAND = 11,
    NAVIGATION_STATE_DESCEND = 12,
    NAVIGATION_STATE_TERMINATION = 13,
    NAVIGATION_STATE_OFFBOARD = 14,
    NAVIGATION_STATE_STAB = 15,
    NAVIGATION_STATE_MAX = 16,
} navigation_state_t;

typedef enum {
    BATTERY_WARNING_NONE = 0,
    BATTERY_WARNING_LOW = 1,
    BATTERY_WARNING_CRITICAL = 2,
    BATTERY_WARNING_MAX = 3,
} battery_warning_t;

typedef enum {
    VEHICLE_TYPE_GENERIC = 0,
    VEHICLE_TYPE_FIXED_WING = 1,
    VEHICLE_TYPE_QUADROTOR = 2,
    VEHICLE_TYPE_COAXIAL = 3,
    VEHICLE_TYPE_HELICOPTER = 4,
    VEHICLE_TYPE_ANTENNA_TRACKER = 5,
    VEHICLE_TYPE_GCS = 6,
    VEHICLE_TYPE_AIRSHIP = 7,
    VEHICLE_TYPE_FREE_BALLOON = 8,
    VEHICLE_TYPE_ROCKET = 9,
    VEHICLE_TYPE_GROUND_ROVER = 10,
    VEHICLE_TYPE_SURFACE_BOAT = 11,
    VEHICLE_TYPE_SUBMARINE = 12,
    VEHICLE_TYPE_HEXAROTOR = 13,
    VEHICLE_TYPE_OCTOROTOR = 14,
    VEHICLE_TYPE_TRICOPTER = 15,
    VEHICLE_TYPE_FLAPPING_WING = 16,
    VEHICLE_TYPE_KITE = 17,
    VEHICLE_TYPE_ONBOARD_CONTROLLER = 18,
    VEHICLE_TYPE_VTOL_DUOROTOR = 19,
    VEHICLE_TYPE_VTOL_QUADROTOR = 20,
    VEHICLE_TYPE_VTOL_HEXAROTOR = 21,
    VEHICLE_TYPE_VTOL_OCTOROTOR = 22,
    VEHICLE_TYPE_MAX = 23,
} vehicle_type_t;

typedef enum {
    RC_IN_MODE_DEFAULT = 0,
    RC_IN_MODE_OFF = 1,
    RC_IN_MODE_GENERATED = 2,
    RC_IN_MODE_MAX = 3,
} rc_in_mode_t;

typedef enum {
    ACTION_NONE = 0,
    ACTION_HELLO = 1,
    ACTION_ARM = 2,
    ACTION_DISARM = 3,
} action_t;

main_state_t fsm_main_state_update(
    main_state_t state,
    main_state_t request,
    status_t stat);
