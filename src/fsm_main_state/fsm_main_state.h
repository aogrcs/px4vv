typedef enum {
	STAT_BATTERY_VOLTAGE_VALID = (1 << 0),
	STAT_SYSTEM_IN_AIR_RESTORE = (1 << 1),
	STAT_SYSTEM_SENSORS_INITIALIZED = (1 << 2),
	STAT_SYSTEM_RETURNED_TO_HOME = (1 << 3),
	STAT_AUTO_MISSION_AVAILABLE = (1 << 4),
	STAT_GLOBAL_POSITION_VALID = (1 << 5),
	STAT_LAUNCH_POSITION_VALID = (1 << 6),
	STAT_HOME_POSITION_VALID = (1 << 7),
	STAT_LOCAL_POSITION_VALID = (1 << 8),
	STAT_LOCAL_ALTITUDE_VALID = (1 << 9),
	STAT_AIRSPEED_VALID = (1 << 10),
	STAT_LANDED = (1 << 11),
	STAT_POWER_INPUT_VALID = (1 << 12),
	STAT_AVIONICS_POWER_RAIL_VOLTAGE = (1 << 13),
	STAT_USB_CONNECTED = (1 << 14),
	STAT_RC_SIGNAL_FOUND_ONCE = (1 << 15),
	STAT_RC_SIGNAL_LOST = (1 << 16),
	STAT_RC_SIGNAL_LOST_CMD = (1 << 17),
	STAT_RC_INPUT_BLOCKED = (1 << 18),
	STAT_DATA_LINK_LOST = (1 << 19),
	STAT_ENGINE_FAILURE = (1 << 20),
	STAT_GPS_FAILURE = (1 << 21),
	STAT_BAROMETER_FAILURE = (1 << 22),
	STAT_OFFBOARD_CONTROL_SIGNAL_FOUND_ONCE = (1 << 23),
	STAT_OFFBOARD_CONTROL_SIGNAL_LOST = (1 << 24),
	STAT_OFFBOARD_CONTROL_SIGNAL_WEAK = (1 << 25),
	STAT_OFFBOARD_CONTROL_SET_BY_COMMAND = (1 << 26),
	STAT_HIL_ENABLED = (1 << 27),
	// note 32 max, add new enum if needed
} status_t;

typedef enum {
	CIRCUIT_BREAKER_POWER_CHECK = (1 << 0),
	CIRCUIT_BREAKER_AIRSPD_CHECK = (1 << 1),
	CIRCUIT_BREAKER_ENGINEFAILURE_CHECK = (1 << 2),
	CIRCUIT_BREAKER_GPSFAILURE_CHECK = (1 << 3),
	// note 32 max, add new enum if needed
} circuit_breaker_t;

typedef enum {
	MAIN_STATE_MANUAL = 0,
	MAIN_STATE_ALTCTL,
	MAIN_STATE_POSCTL,
	MAIN_STATE_AUTO_MISSION,
	MAIN_STATE_AUTO_LOITER,
	MAIN_STATE_AUTO_RTL,
	MAIN_STATE_ACRO,
	MAIN_STATE_AUTO_OFFBOARD,
	MAIN_STATE_STAB,
	MAIN_STATE_MAX,
	MAIN_STATE_ANY,
} main_state_t;

typedef enum {
	ARMING_STATE_INIT = 0,
	ARMING_STATE_STANDBY,
	ARMING_STATE_ARMED,
	ARMING_STATE_ARMED_ERROR,
	ARMING_STATE_STANDBY_ERROR,
	ARMING_STATE_REBOOT,
	ARMING_STATE_IN_AIR_RESTORE,
	ARMING_STATE_MAX,
	ARMING_STATE_ANY,
} arming_state_t;

typedef enum {
	NAVIGATION_STATE_MANUAL = 0,
	NAVIGATION_STATE_ALTCTL,
	NAVIGATION_STATE_POSCTL,
	NAVIGATION_STATE_AUTO_MISSION,
	NAVIGATION_STATE_AUTO_LOITER,
	NAVIGATION_STATE_AUTO_RTL,
	NAVIGATION_STATE_AUTO_RCRECOVER,
	NAVIGATION_STATE_AUTO_RTGS,
	NAVIGATION_STATE_AUTO_LANDENGFAIL,
	NAVIGATION_STATE_AUTO_LANDGPSFAIL,
	NAVIGATION_STATE_ACRO,
	NAVIGATION_STATE_LAND,
	NAVIGATION_STATE_DESCEND,
	NAVIGATION_STATE_TERMINATION,
	NAVIGATION_STATE_OFFBOARD,
	NAVIGATION_STATE_STAB,
	NAVIGATION_STATE_MAX,
	NAVIGATION_STATE_ANY,
} navigation_state_t;

typedef enum {
	BATTERY_WARNING_NONE = 0,
	BATTERY_WARNING_LOW,
	BATTERY_WARNING_CRITICAL,
	BATTERY_WARNING_MAX,
	BATTERY_WARNING_ANY,
} battery_warning_t;

typedef enum {
	VEHICLE_TYPE_GENERIC = 0,
	VEHICLE_TYPE_FIXED_WING,
	VEHICLE_TYPE_QUADROTOR,
	VEHICLE_TYPE_COAXIAL,
	VEHICLE_TYPE_HELICOPTER,
	VEHICLE_TYPE_ANTENNA_TRACKER,
	VEHICLE_TYPE_GCS,
	VEHICLE_TYPE_AIRSHIP,
	VEHICLE_TYPE_FREE_BALLOON,
	VEHICLE_TYPE_ROCKET,
	VEHICLE_TYPE_GROUND_ROVER,
	VEHICLE_TYPE_SURFACE_BOAT,
	VEHICLE_TYPE_SUBMARINE,
	VEHICLE_TYPE_HEXAROTOR,
	VEHICLE_TYPE_OCTOROTOR,
	VEHICLE_TYPE_TRICOPTER,
	VEHICLE_TYPE_FLAPPING_WING,
	VEHICLE_TYPE_KITE,
	VEHICLE_TYPE_ONBOARD_CONTROLLER,
	VEHICLE_TYPE_VTOL_DUOROTOR,
	VEHICLE_TYPE_VTOL_QUADROTOR,
	VEHICLE_TYPE_VTOL_HEXAROTOR,
	VEHICLE_TYPE_VTOL_OCTOROTOR,
	VEHICLE_TYPE_MAX,
	VEHICLE_TYPE_ANY,
} vehicle_type_t;

typedef enum {
	RC_IN_MODE_DEFAULT = 0,
	RC_IN_MODE_OFF,
	RC_IN_MODE_GENERATED,
	RC_IN_MODE_MAX,
	RC_IN_MODE_ANY,
} rc_in_mode_t;

typedef enum {
	ACTION_NONE = 0,
	ACTION_HELLO,
	ACTION_ARM,
	ACTION_DISARM,
	ACTION_ANY,
} action_t;

main_state_t fsm_main_state_update(
	main_state_t state,
	main_state_t request,
	status_t stat);
